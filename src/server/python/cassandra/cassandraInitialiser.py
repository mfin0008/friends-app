from cassandra.cluster import Cluster
from cassandra.query import BatchStatement
from cassandra.auth import PlainTextAuthProvider
import json, csv


def parse_utterance_values():
    with open('../data/friends.csv') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        next(csv_reader, None)
        utterance_count = 0

        utterance_objects = []

        for row in csv_reader:
            utterance_object = {
                "season": row[2],
                "episode": row[3], 
                "scene": row[4],
                "utterance": row[5],
                "utterance_id": utterance_count
            }
            utterance_objects.append(utterance_object)
            utterance_count += 1

    return utterance_objects
        

def main():

    # This secure connect bundle is autogenerated when you download your SCB,
    # if yours is different update the file name below
    cloud_config = {
        'secure_connect_bundle': './python/cassandra/secure-connect-friends-cassandra-db.zip'
    }

    # This token JSON file is autogenerated when you download your token,
    # if yours is different update the file name below
    with open("./python/cassandra/transaction_db-token.json") as secrets_file:
        secrets = json.load(secrets_file)

    CLIENT_ID = secrets["clientId"]
    CLIENT_SECRET = secrets["secret"]

    auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
    cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
    session = cluster.connect()

    # Switching to the keyspace
    session.set_keyspace('utterances')

    # Creating the table
    # session.execute("drop table if exists utterances_by_id")
    session.execute("""
        CREATE TABLE IF NOT EXISTS utterances_by_id (
            utterance_id int,
            season int,
            episode int,
            scene int,
            utterance int,
            PRIMARY KEY ((season, episode, scene, utterance), utterance_id)
        )
    """)

    # # if the database is empty, parse and insert the values from the dataset
    number_of_rows = session.execute("""
        select count(*) from utterances_by_id;
                    """).one().count
    
    # if number_of_rows == 0:
    #     for utterance_object in parse_utterance_values():
    #         session.execute(f"insert into utterances_by_id (utterance_id, season, episode, scene, utterance) values ({utterance_object['utterance_id']}, {utterance_object['season']}, {utterance_object['episode']}, {utterance_object['scene']}, {utterance_object['utterance']}) if not exists;")
    # else:
    #     print(type(number_of_rows))

    prepared_statement = session.prepare("insert into utterances_by_id (utterance_id, season, episode, scene, utterance) values (?, ?, ?, ?, ?) if not exists")
    for utterance_object in parse_utterance_values():
        if utterance_object['utterance_id'] >= number_of_rows:
            bound_statement = prepared_statement.bind([int(utterance_object['utterance_id']), int(utterance_object['season']), int(utterance_object['episode']), int(utterance_object['scene']), int(utterance_object['utterance'])])
            session.execute(bound_statement)
main()

